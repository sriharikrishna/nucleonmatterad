TAPENADE_HOME = /home/wmoses/git/Enzyme/enzyme/build12/nucleonmatterad/src/tap/tapenade_3.16
TPN  = ${TAPENADE_HOME}/bin/tapenade

CC = @gcc
CC = docker run -v `pwd`:/pwd wsmoses/flang clang-7 -flto -fuse-ld=lld-7
FC = @gfortran
FC = docker run -v `pwd`:/pwd wsmoses/flang flang -flto -fuse-ld=lld-7

WFLAGS    = -w
#FFLAGS   = -O0 -g -fdefault-double-8 -fdefault-real-8  -fno-range-check -ffpe-trap=invalid
#FFLAGS   = -O0 -g -fdefault-double-8 -fdefault-real-8 -mcmodel=medium -fno-range-check -ffpe-trap=invalid
#FFLAGS   = -O0 -g -fdefault-double-8 -fdefault-real-8 -fno-range-check  -ffpe-trap=invalid,zero,overflow -fbacktrace
#FFLAGS   = -O3  -fdefault-double-8 -fdefault-real-8 -fno-range-check  -fbacktrace
FFLAGS   = -O3  -fdefault-double-8 -fdefault-real-8 -fno-range-check ${WFLAGS} -fno-vectorize -fno-unroll-loops
#FFLAGS   = -O0 -g  -fdefault-double-8 -fdefault-real-8 -fno-range-check  
F90FLAGS = $(FFLAGS)
#CFLAGS   = -g
#CPPFLAGS = -g

#TARGETS =  nmad nmadv 
TARGETS =  nmadv 
#numCore_d.pre.f nmadv numCore_dv.pre.f

all: info ${TARGETS}

SRC=\
nmmainad.f\
nmmain.f\
nmhnc.f\
nmtbi.f\
nmchain.f\
nmfts.f\
nmsub.f

SRCSUB= sub/eft_pot_r.pre.f\
sub/pot.pre.f\
sub/numrec.pre.f\
sub/dgamma.pre.f

DIFFSIZES.inc: $(CASE)/DIFFSIZES${FULLX}.inc
	cp $(CASE)/DIFFSIZES${FULLX}.inc DIFFSIZES.inc

OBJSUB= sub/dtime.o sub/headtime.pre.o sub/linpack.pre.o sub/minimi.pre.o sub/numrec.pre.o \
   sub/pot.pre.o sub/eft_pot_r.pre.o sub/dgamma.pre.o isnan_d.o

OBJLBFGS=lbfgs_um/sdrive.pre.o lbfgs_um/lbfgs.o

OBJLBFGSB=Lbfgsb.3.0/driver2.pre.o Lbfgsb.3.0/lbfgsb.o Lbfgsb.3.0/linpack.o Lbfgsb.3.0/blas.o

ifdef BFGSCONST
  OBJLBFGS=${OBJLBFGSB}
endif

info:
	@echo "--- Differeniating with the following options"\
       "CASE="${CASE}\
       "BFGS="${BFGS}\
       "BFGSCONST="${BFGSCONST}\
       "ALL="${ALL}\
       "FULLX="${FULLX}\
       "NUCMAT="${NUCMAT}\
       "CUSTOM_INPUTS="${CUSTOM_INPUTS}

nmad: numCore_d.pre.o nm.pre.o nucmat.pre.o nmsub.pre.o $(OBJSUB) $(OBJLBFGS)
	${FC} ${FFLAGS} -o /pwd/$@ $(addprefix /pwd/,$^)

nmadv: numCore_dv.pre.o nm.pre.o $(OBJLBFGS)  sub/dtime.o sub/headtime.pre.o sub/linpack.pre.o sub/minimi.pre.o 
# nmadv: numCore.pre.o numCore_dv.pre.o nm.pre.o nucmat.pre.o nmsub.pre.o $(OBJSUB) $(OBJLBFGS) 
	docker run -v `pwd`:/pwd wsmoses/flang llvm-link-7 $(addprefix /pwd/,$^) -o /pwd/linked
	docker run -v `pwd`:/pwd wsmoses/flang bash -c "opt-7 /pwd/linked -S | sed 's/call.*enzyme_autodiff_.*)([^,]*/call void (...) @enzyme_autodiff_(i8* bitcast (void (i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*, i64*)* @nmmainad_ to i8*)/g' > /pwd/linked2"
	docker run -v `pwd`:/pwd wsmoses/flang bash -c "sed 's/enzyme_integer_/__enzyme_integer/g' /pwd/linked2 -i"
	# docker run -v `pwd`:/pwd wsmoses/flang bash -c "sed 's/__fd_sincos_1/sincos/g' -i /pwd/linked2"
	docker run -v `pwd`:/pwd wsmoses/flang opt-7 /pwd/linked2 -load=/Enzyme/enzyme/build/Enzyme/LLVMEnzyme-7.so -O1 -enzyme -enzyme-inline -enzyme-loose-types -enzyme-lower-globals -enzyme-globals-default-inactive -o /pwd/enzymed 
	# ${FC} ${FFLAGS} -o /pwd/$@ /pwd/enzymed
	${FC} -O3 -o /pwd/$@ /pwd/enzymed

numCore.f: $(SRC) $(SRCSUB)
	@cat $^ > $@ 

#numCore_d.pre.f: numCore.pre.f
#	${TPN} -forward -head nmmainad  $< 
#	mv numCore.pre_d.f $@

numCore_dv.pre.f: numCore.pre.f DIFFSIZES.inc nucmat.pre.f
	@echo "--- Generating Tapenade Output: nmmainad(flocal,gint,endiff,efree)/(dor,bls,bst,btn,als,ast,atn)"
	# head -n 6496 $<
	${TPN} -forward -vector -head "nmmainad(flocal)/(dor,bls,bst,btn,als,ast,atn)"  $< 
	@mv numCore.pre_dv.f $@
	cat numCore.pre.f >> $@ 
	cat nucmat.pre.f >> $@ 

CPPFLAGS= $(DIFF) $(WFLAGS) -DALLOW_TAPENADE -DALLOW_DATA 
ifdef BFGS
CPPFLAGS+=-DBFGS
endif
ifdef ALL
CPPFLAGS+=-DDO_ALL
endif
ifdef FULLX
CPPFLAGS+=-DDO_FULLX
endif
ifdef NUCMAT
CPPFLAGS+=-DONLY_NUCMAT
endif
ifdef CUSTOM_INPUTS
CPPFLAGS+=-DCUSTOM_INPUTS
endif
ifeq ($(CASE), snm)
  CPPFLAGS+=-DCASE_SNM
else
  CPPFLAGS+=-DCASE_PNM
endif

CPPCMD = @cat $< |  cpp  $(CPPFLAGS)  -I../ -I./ -traditional-cpp -P 

%.pre.c: %.c
	$(CPPCMD) > $@

%.pre.f: %.f
	$(CPPCMD) > $@

%.o : %.F
	${FC} ${FFLAGS} -cpp  -o /pwd/$@ -c /pwd/$<

%.o : %.f90
	${FC} ${F90FLAGS} -cpp -o /pwd/$@ -c /pwd/$< 

%.o : %.f
	@echo "--- Compiling" $<
	# head -n 28 $<
	${FC} ${F90FLAGS} -cpp -o /pwd/$@ -c /pwd/$< 

%.o : %.c
	@echo "--- Compiling" $<
	${CC} -cpp -o /pwd/$@ -c /pwd/$< 

#
# transformation rules
#


clean:	
	@/bin/rm -f *.pre.f *.o *.cpp *.msg *.mod numCore.* nclude/*.o nclude/*.mod params_d.f nmad nmadv
	@/bin/rm -f sub/*.pre.f sub/*.o sub/*.cpp sub/*.msg sub/*.mod numCore.* nclude/*.o nclude/*.mod
	@/bin/rm -f lbfgs_um/*.o Lbfgsb.3.0/*.o DIFFSIZES.inc

realclean: clean	
	@/bin/rm -f $(TARGETS)

