!#########################################################
! This file is part of OpenAD released under the LGPL.   #
! The full COPYRIGHT notice can be found in the top      #
! level directory of the OpenAD distribution             #
!#########################################################
        subroutine template()
          use OAD_tape
          use OAD_rev
          use OAD_cp

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

!$TEMPLATE_PRAGMA_DECLARATIONS

          ! checkpointing stacks and offsets
          integer :: 
     +cp_loop_variable_1,
     +cp_loop_variable_2,
     +cp_loop_variable_3,
     +cp_loop_variable_4,
     +cp_loop_variable_5,
     +cp_loop_variable_6

          ! floats 'F'
          double precision, dimension(:), allocatable, save :: 
     +theArgFStack
          integer, save :: theArgFStackoffset=0, theArgFStackSize=0
          ! integers 'I'
          integer, dimension(:), allocatable, save :: 
     +theArgIStack
          integer, save :: theArgIStackoffset=0, theArgIStackSize=0
          ! booleans 'B'
          logical, dimension(:), allocatable, save :: 
     +theArgBStack
          integer, save :: theArgBStackoffset=0, theArgBStackSize=0
          ! strings 'S'
          character*(80), dimension(:), allocatable, save :: 
     +theArgSStack
          integer, save :: theArgSStackoffset=0, theArgSStackSize=0

          type(modeType) :: our_orig_mode
          integer :: my_cp_file_number

! external C function used in inlined code
          integer iaddr
          external iaddr

          if (our_rev_mode%arg_store) then 
            my_cp_file_number = cp_fNumber()
            write(*,*) "write open cp_file_number", my_cp_file_number!, "ptr", oad_it_ptr
            call cp_write_open()
            !if (oad_it_sz.lt.oad_it_ptr) call oad_it_grow()
            !oad_it(oad_it_ptr) = my_cp_file_number
            !oad_it_ptr = oad_it_ptr+1
C store arguments
!$PLACEHOLDER_PRAGMA$ id=4
            write(*,*) "write close cp_fNumber()", cp_fNumber(), "my_cp_file_number", my_cp_file_number
            call cp_close()
          end if 
          if (our_rev_mode%arg_restore) then
             !oad_it_ptr = oad_it_ptr-1
             !my_cp_file_number = oad_it(oad_it_ptr)
             !write(*,*) "read open cp_file_number", my_cp_file_number, "ptr", oad_it_ptr
             !call cp_read_open(my_cp_file_number)
            call cp_read_open()
            write(*,*) "read open cp_file_number", cp_fNumber()
C restore arguments
!$PLACEHOLDER_PRAGMA$ id=6
            write(*,*) "read close cp_file_number", cp_fNumber()
            call cp_close_and_delete()
          end if
          if (our_rev_mode%plain) then
            our_orig_mode=our_rev_mode
            our_rev_mode%arg_store=.FALSE.
C original function
!$PLACEHOLDER_PRAGMA$ id=1
C original function end
            our_rev_mode=our_orig_mode
          end if 
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store=.TRUE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.TRUE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.FALSE.
C taping
!$PLACEHOLDER_PRAGMA$ id=2
C taping end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.TRUE.
          end if 
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
C adjoint
!$PLACEHOLDER_PRAGMA$ id=3
C adjoint end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
          end if 
        end subroutine template
