      module  nmsubmod
      public
c      data b/1.,4*0.,3.,4*0.,6.,18*0.,3.,2*0.,3.,-6.,4*0.,6.,19*0.
c     $,6.,3*0.,6.,0.,2*6.,-12.,3*0.,-18.,3*0.,36.,3*0.,36.,3*0.,54.
c     $,29*0./

      real*8, dimension(112) ::bnmsubmod=[1.,0.,0.,0.,0.,3.,0.,0.,0.,0.,
     &   6.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &   0.,0.,0.,0.,0.,0.,0.,0.,0.,3.,
     &   0.,0.,3.,-6.,0.,0.,0.,0.,6.,0.,
     &   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &   0.,0.,0.,0.,0.,0.,0.,0.,6.,0.,
     &   0.,0.,6.,0.,6.,6.,-12.,0.,0.,0.,
     &   -18.,0.,0.,0.,36.,0.,0.,0.,36.,0.,
     &   0.,0.,54.,0.,0.,0.,0.,0.,0.,0.,
     &   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &   0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &   0.,0.]

c      data bex/1.,3.,2*0.,3.,-3.,4*0.,12.,17*0.,3.,-3.,2*0.,-3.
c     $,15.,4*0.,12.,19*0.,12.,3*0.,12.,0.,2*12.,-24.,3*0.,-36.,3*0.,72.
c     $,3*0.,72.,3*0.,108.,29*0./

      real*8, dimension(112) :: bex = [1.,3.,0.,0.,3.,-3.,0.,0.,0.,0.,
     &      12.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,3.,-3.,
     &      0.,0.,-3.,15.,0.,0.,0.,0.,12.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,12.,0.,
     &      0.,0.,12.,0.,12.,12.,-24.,0.,0.,0.,
     &      -36.,0.,0.,0.,72.,0.,0.,0.,72.,0.,
     &      0.,0.,108.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.]

      !data bl2/15*0.,.5,1.,4*0.,3.,2*0.,2*.5,-.5,-.25
      !$,15*0.,.5,0.,3.,2*0.,3.,-6.,2*0.,2*.5,-.5,-.25
      !$,15*0.,-.5,2*0.,6.,3*0.,6.,0.,2*-.5,5.,1.
      !$,3*0.,.5,3*0.,.5,3*0.,-.5,2*.5,-.5,-.25,3*0.,.5,3*0.,.5,2*-.25
      !$,1.,.5/


       real*8, dimension(112) :: bl2 = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,.5,1.,0.,0.,0.,
     &      0.,3.,0.,0.,.5,.5,-.5,-.25,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,0.,0.,.5,0.,3.,0.,0.,3.,-6.,
     &      0.,0.,.5,.5,-.5,-.25,0.,0.,0.,0.,
     &      0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &      0.,-.5,0.,0.,6.,0.,0.,0.,6.,0.,
     &      -.5,-.5,5.,1.,0.,0.,0.,.5,0.,0.,
     &      0.,.5,0.,0.,0.,-.5,.5,.5,-.5,-.25,
     &      0.,0.,0.,.5,0.,0.,0.,.5,-.25,-.25,
     &      1.,.5]

      !data bl2ex/15*0.,2*1.,3.,2*0.,3.,-3.,2*0.,2*1.,-1.,-.5
      !$,15*0.,1.,3.,-3.,2*0.,-3.,15.,2*0.,2*1.,-1.,-.5
      !$,15*0.,-1.,2*0.,12.,3*0.,12.,0.,2*-1.,10.,2.
      !$,3*0.,1.,3*0.,1.,3*0.,-1.,2*1.,-1.,-.5,3*0.,1.,3*0.,1.,2*-.5
      !$,2.,1./

       real*8, dimension(112) :: bl2ex = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &         0.,0.,0.,0.,0.,1.,1.,3.,0.,0.,
     &         3.,-3.,0.,0.,1.,1.,-1.,-.5,0.,0.,
     &         0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &         0.,0.,0.,1.,3.,-3.,0.,0.,-3.,15.,
     &         0.,0.,1.,1.,-1.,-.5,0.,0.,0.,0.,
     &         0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
     &         0.,-1.,0.,0.,12.,0.,0.,0.,12.,0.,
     &         -1.,-1.,10.,2.,0.,0.,0.,1.,0.,0.,
     &         0.,1.,0.,0.,0.,-1.,1.,1.,-1.,-.5,
     &         0.,0.,0.,1.,0.,0.,0.,1.,-.5,-.5,
     &         2.,1.]

      !data ms/2*1,2*2,2*3,2*4,2*5,2*6,2*7/
      integer*4, dimension(14) :: ms = [1,1,2,2,3,3,4,4,5,5,6,6,7,7]

      !data mt/1,2,1,2,1,2,1,2,1,2,1,2,1,2/
      integer*4, dimension(14) :: mt = [1,2,1,2,1,2,1,2,1,2,1,2,1,2]

      public :: ac,acex,acl2,acl2ex,al2

      contains
c *id* ac **************************************************************
c subfuntions for matrices c,cex,cl2,cl2ex
c **********************************************************************
      function ac(i,j,k)
      !$ xxx template ad_template.split.f
        implicit none
        real*8 :: ac
        integer*4 :: i,j,k
        integer*4 :: ns,nt
        ns=ms(i)+4*ms(j)+28*ms(k)-32
        nt=mt(i)+4*mt(j)+28*mt(k)-32
        ac=bnmsubmod(ns)*bnmsubmod(nt)
      return
      end function
c ****************************
      function acex(i,j,k)
      !$ xxx template ad_template.split.f
        implicit none
        real*8 :: acex
        integer*4 :: i,j,k
        integer*4 :: ns,nt
        ns=ms(i)+4*ms(j)+28*ms(k)-32
        nt=mt(i)+4*mt(j)+28*mt(k)-32
        acex=bex(ns)*bex(nt)
        return
      end function
c ****************************
      function acl2(i,j,k)
      !$ xxx template ad_template.split.f
        implicit none
        real*8 :: acl2
        integer*4 :: i,j,k
        integer*4 :: ns,nt
        ns=ms(i)+4*ms(j)+28*ms(k)-32
        nt=mt(i)+4*mt(j)+28*mt(k)-32
        acl2=bl2(ns)*bnmsubmod(nt)
        return
      end function
c ****************************
      function acl2ex(i,j,k)
      !$ xxx template ad_template.split.f
        implicit none
        real*8 :: acl2ex
        integer*4 :: i,j,k
        integer*4 :: ns,nt
        ns=ms(i)+4*ms(j)+28*ms(k)-32
        nt=mt(i)+4*mt(j)+28*mt(k)-32
        acl2ex=bl2ex(ns)*bex(nt)
        return
      end function
c ****************************
      function al2(i,j,k)
      !$ xxx template ad_template.split.f
        implicit none
        real*8 :: al2
        integer*4 :: i,j,k
        integer*4 :: ns,nt
        ns=ms(i)+4*ms(j)+28*ms(k)-32
        al2=bl2(ns)
        return
      end function
      end module nmsubmod
